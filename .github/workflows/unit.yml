name: Backend unit tests

on:
  - push
  - pull_request

env:
  RAILS_ENV: test

jobs:
  backend:
    name: Backend Tests
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gmmcalcombr_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1

      # languages
      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install PostgreSQL 11 client
        run: sudo apt-get -yqq install libpq-dev

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundler-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-bundler-${{ env.cache-name }}-
            ${{ runner.os }}-bundler-

      - name: Run bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --deployment
      - name: Setup database
        run: bundle exec rails db:migrate

      # dependencies
      - name: Install Bundler gem
        run: gem install bundler
      - name: Check ruby version
        run: ruby --version

      # script
      - name: Run tests
        run: bundle exec rspec

      - name: Upload backend coverage result
        uses: actions/upload-artifact@v1
        with:
          name: backend-coverage
          path: coverage/backend/.resultset.json

  frontend:
    name: Frontend Tests
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1

      - name: Install Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Install yarn
        run: npm i -g yarn
      - name: Check yarn version
        run: yarn --version

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-

      - name: Run yarn install
        run: yarn install

      - name: Run tests
        run: yarn test:once

      - name: Upload frontend coverage result
        uses: actions/upload-artifact@v1
        with:
          name: frontend-coverage
          path: coverage/frontend/lcov.info

  coverage:
    name: Collect and upload coverage
    runs-on: ubuntu-18.04

    needs:
      - backend
      - frontend

    steps:
      - uses: actions/checkout@v1

      - name: Install CodeClimate tool
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter

      - name: Download backend coverage result
        uses: actions/download-artifact@v1
        with:
          name: backend-coverage

      - name: Download frontend coverage result
        uses: actions/download-artifact@v1
        with:
          name: frontend-coverage

      - name: Upload coverage to CodeClimate
        run: |
          ./cc-test-reporter format-coverage -t simplecov -o codeclimate.backend.json backend-coverage/.resultset.json
          ./cc-test-reporter format-coverage -t lcov -o codeclimate.frontend.json frontend-coverage/lcov.info
          ./cc-test-reporter sum-coverage codeclimate.*.json -p 2
          ./cc-test-reporter upload-coverage
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

name: Unit Tests

on:
  - push
  - pull_request

env:
  RAILS_ENV: test
  YARN_ENV: test

jobs:
  backend:
    name: 'Unit: Backend'
    runs-on: ubuntu-20.04

    container:
      image: ruby:3.0.0

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gmmcalcombr_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v1

      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # languages
      - name: Install APT dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_14.x | bash -
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
          apt-get -yqq install nodejs libpq-dev

      # dependencies
      - name: Run bundle install
        run: |
          bundle config path vendor/bundle
          bundle config set without development production
          bundle install --jobs 4 --retry 3 --deployment

      - name: Setup database
        run: |
          bundle exec rails db:migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/gmmcalcombr_test

      # script
      - name: Run tests
        run: |
          bundle exec rspec
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/gmmcalcombr_test
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true

      - name: Upload backend coverage result
        uses: actions/upload-artifact@v1
        with:
          name: backend-coverage
          path: coverage/backend/coverage.json

  frontend:
    name: 'Unit: Frontend'
    runs-on: ubuntu-20.04

    container:
      image: ruby:3.0.0

    steps:
      - uses: actions/checkout@v1

      - name: Install APT dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_14.x | bash -
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
          apt-get -yqq install nodejs

      - name: Install yarn
        run: npm i -g yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run yarn install
        run: yarn install

      - name: Run tests
        run: yarn test:once

      - name: Upload frontend coverage result
        uses: actions/upload-artifact@v1
        with:
          name: frontend-coverage
          path: coverage/frontend/lcov.info

  coverage:
    name: 'Unit: Coverage'
    runs-on: ubuntu-20.04

    if: github.event_name == 'push'

    container:
      image: ruby:3.0.0

    needs:
      - backend
      - frontend

    steps:
      - uses: actions/checkout@v1

      - name: Install CodeClimate tool
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter

      - name: Download backend coverage result
        uses: actions/download-artifact@v1
        with:
          name: backend-coverage

      - name: Download frontend coverage result
        uses: actions/download-artifact@v1
        with:
          name: frontend-coverage

      - name: Prepare backend coverage
        run: |
          ./cc-test-reporter format-coverage -t simplecov -o codeclimate.backend.json backend-coverage/coverage.json

      - name: Prepare frontend coverage
        run: |
          ./cc-test-reporter format-coverage -t lcov -o codeclimate.frontend.json frontend-coverage/lcov.info

      - name: Combine coverage files
        run: |
          ./cc-test-reporter sum-coverage codeclimate.*.json -p 2

      - name: Upload coverage to CodeClimate
        run: |
          ./cc-test-reporter upload-coverage
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

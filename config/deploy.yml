# Name of your application. Used to uniquely configure containers.
service: gmmcal

# Name of the container image.
image: gmmcal/gmmcal

# Deploy to these servers.
servers:
  web:
    - www.gustavocunha.dev
  db:
    - www.gustavocunha.dev
  job:
    hosts:
      - www.gustavocunha.dev
    cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.proxy:
proxy:
  ssl: true
  hosts:
    - gustavocunha.dev
    - www.gustavocunha.dev
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Credentials for your image host.
registry:
  # server: localhost:5555
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: gmmcal

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  target: production
  cache:
    type: registry
    options: mode=max
    image: gmmcal/gmmcal.com.br:productioncache

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    IS_PRODUCTION: true
    RAILS_LOG_TO_STDOUT: enabled
    RAILS_SERVE_STATIC_FILES: enabled
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_USERNAME
    - DATABASE_HOST
    - DATABASE_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  worker: app logs -f -r worker
  db: app exec --interactive --reuse "bin/rails dbconsole"
  post-release: app exec --interactive --reuse "bin/rails db:migrate db:cache:clear"
# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /rails/public/assets
# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:16
    roles:
      - db
    port: 5432
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_DB
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
